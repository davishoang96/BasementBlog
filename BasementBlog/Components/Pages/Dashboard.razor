@page "/dashboard"
@using BasementBlog.ViewModels;
@attribute [Authorize(Roles = "Admin")]

<MudContainer Class="home-container">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Posts">
            <MudDataGrid Items="@vm.Posts.Where(s=>s.IsDelete == null || s.IsDelete == false)" Filterable="false" SortMode="@SortMode.None" Groupable="false">
                <Columns>
                    <PropertyColumn Property="p => p.Title" />
                    <PropertyColumn Property="p => p.Description" Title="Description" />
                    <PropertyColumn Property="p => p.CategoryName" Title="Category" />
                    <PropertyColumn Property="p => p.PublishDate" Title="Publish Date" />
                    <PropertyColumn Property="p => p.ModifiedDate" Title="Modified Date" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudStack Row>
                                <MudFab Color="MudBlazor.Color.Error" OnClick="() => vm.SoftDeletePost(context.Item.Id)"
                                        StartIcon="@Icons.Material.Filled.Delete" Size="@MudBlazor.Size.Small" />
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Deleted Posts">
            <MudDataGrid Items="@vm.Posts.Where(s=>s.IsDelete.HasValue && s.IsDelete.Value == true)" Filterable="false" SortMode="@SortMode.None" Groupable="false">
                <Columns>
                    <PropertyColumn Property="p => p.Title" />
                    <PropertyColumn Property="p => p.Description" Title="Description" />
                    <PropertyColumn Property="p => p.CategoryName" Title="Category" />
                    <PropertyColumn Property="p => p.PublishDate" Title="Publish Date" />
                    <PropertyColumn Property="p => p.ModifiedDate" Title="Modified Date" />
                    @* <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudStack Row>
                                <MudFab Color="MudBlazor.Color.Error" OnClick="() => vm.SoftDeletePost(context.Item.Id)"
                                        StartIcon="@Icons.Material.Filled.Delete" Size="@MudBlazor.Size.Small" />
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn> *@
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Categories">
            <MudDataGrid Items="@vm.Categories" Filterable="false" SortMode="@SortMode.None" Groupable="false">
                <Columns>
                    <PropertyColumn Property="c => c.CategoryId" />
                    <PropertyColumn Property="c => c.Name" Title="Name" />
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Users" Disabled="true">
            <MudText>Content Disabled</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Settings" Disabled="true">
            <MudText>Content Disabled</MudText>
        </MudTabPanel>
    </MudTabs>
</MudContainer>


@code {
    [Inject]
    private DashboardViewModel vm { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await vm.InitialDashboard();
    }
}
