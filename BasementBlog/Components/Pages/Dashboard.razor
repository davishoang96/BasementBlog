@page "/dashboard"
@using BasementBlog.DTO
@using BasementBlog.ViewModels;
@attribute [Authorize(Roles = "Admin")]

<MudContainer Class="home-container">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Posts">
            <MudDataGrid T="PostDTO" RowClick="(e) => OnRowClick(e.Item.Id)" Items="@vm.Posts" 
                         Filterable="false" SortMode="@SortMode.None" 
                         Groupable="false" Dense="true" Hover="true">
                <Columns>
                    <PropertyColumn Property="p => p.Title" Title="Title" />
                    <PropertyColumn Property="p => p.Description" Title="Description" />
                    <PropertyColumn Property="p => p.CategoryName" Title="Category" />
                    <PropertyColumn Property="p => p.PublishDate" Title="Publish Date" />
                    <PropertyColumn Property="p => p.ModifiedDate" Title="Modified Date" />
                    <TemplateColumn Title="Status">
                        <CellTemplate>
                            <MudStack Row>
                                @if (context.Item.IsDelete.HasValue && context.Item.IsDelete.Value == true)
                                {
                                    <MudText>Deleted</MudText>
                                }
                                else
                                {
                                    <MudText>Published</MudText>
                                }
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudStack Row>
                                @if(context.Item.IsDelete.HasValue && context.Item.IsDelete.Value == true)
                                {
                                    <MudFab Color="MudBlazor.Color.Primary" OnClick="() => vm.RestorePost(context.Item.Id)"
                                            StartIcon="@Icons.Material.Filled.Restore" Size="@MudBlazor.Size.Small" />
                                }
                                else
                                {
                                    <MudFab Color="MudBlazor.Color.Error" OnClick="() => vm.SoftDeletePost(context.Item.Id)"
                                            StartIcon="@Icons.Material.Filled.Delete" Size="@MudBlazor.Size.Small" />
                                }
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Categories">
            <MudDataGrid Items="@vm.Categories" Filterable="false" SortMode="@SortMode.None" Groupable="false">
                <Columns>
                    <PropertyColumn Property="c => c.CategoryId" />
                    <PropertyColumn Property="c => c.Name" Title="Name" />
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Users" Disabled="true">
            <MudText>Content Disabled</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Settings" Disabled="true">
            <MudText>Content Disabled</MudText>
        </MudTabPanel>
    </MudTabs>
</MudContainer>


@code {
    [Inject]
    private DashboardViewModel vm { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await vm.InitialDashboard();
    }

    void OnRowClick(string id)
    {
        vm.ViewPost(id);
    }
}
