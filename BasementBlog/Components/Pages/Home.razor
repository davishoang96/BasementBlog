@page "/"
@using BasementBlog.ViewModels

<PageTitle>Home</PageTitle>

<div class="home-container">
    <MudItem xs="12" sm="12" md="12" lg="12" xl="12" class="mb-4">
        <MudText>
            Hello, I'm Davis, a versatile individual fueled by a passion for photography,
            hiking, piano, and coding. Behind the camera,
            I find joy in capturing the essence of life through unique visual narratives. \
            Whether exploring nature's trails, playing melodies on the piano for relaxation,
            or delving into the world of coding to craft innovative solutions,
            each interest contributes to a harmonious blend of creativity and exploration in my life.
            This diverse tapestry reflects my continuous journey of self-discovery and growth,
            where each pursuit adds a unique color to the canvas of my experiences.
        </MudText>
    </MudItem>

    @foreach (var category in vm.Categoroies)
    {
        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" class="mb-4">
            <h6>@category.Name</h6>
            <ul>
                @foreach (var post in category.PostDTOs)
                {
                    <li>
                        <MudLink OnClick="() => vm.ViewPost(post.Id)">@post.Title</MudLink>
                    </li>
                }
            </ul>
        </MudItem>
    }

    <MudItem xs="12" sm="12" md="12" lg="12" xl="12" class="mb-4">
        <h6>Unclassified Posts</h6>
        @foreach (var post in vm.Posts)
        {
            <div>
                <MudLink OnClick="() => vm.ViewPost(post.Id)">@post.Title</MudLink>
            </div>
        }
    </MudItem>

</div>

@code
{
    [Inject]
    private HomeViewModel vm { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await vm.GetCategoriesWithPost();
        await vm.GetUnclassifiedPosts();

        if (authenticationState is not null)
        {
            var state = await authenticationState;
            var username = state?.User?.Identity?.Name ?? string.Empty;
        }
    }
}
