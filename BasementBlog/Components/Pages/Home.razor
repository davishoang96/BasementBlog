@page "/"
@using BasementBlog.ViewModels

<PageTitle>Home</PageTitle>

<div class="container mt-5">

    <h3>Hello @Username</h3>
    <MudGrid>
        @foreach (var post in vm.Posts)
        {
            <MudItem xs="3">
                <MudCard Outlined="true">
                    <MudCardContent>
                        <h3 class="mb-2">@post.Title</h3>
                        <p>@post.Description</p>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="MudBlazor.Color.Success" OnClick="() => vm.ViewPost(post.Id)">Read more</MudButton>
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <MudButton Color="MudBlazor.Color.Primary" OnClick="() => vm.EditPost(post.Id)">Edit</MudButton>
                                <MudButton Color="MudBlazor.Color.Error" OnClick="() => vm.DeletePostCommand.Execute(post)">Delete</MudButton>
                            </Authorized>
                        </AuthorizeView>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</div>

@code
{
    [Inject]
    private HomeViewModel vm { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string Username = "";

    protected override async Task OnInitializedAsync()
    {
        await vm.GetPosts();

        if (authenticationState is not null)
        {
            var state = await authenticationState;
            Username = state?.User?.Identity?.Name ?? string.Empty;
        }
    }
}
