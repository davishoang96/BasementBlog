@page "/viewPost/{postId}"
@using Blog.DTO
@using Blog.Services
@using Blog.Services.Interfaces
@using Blog.Utilities
@inject IMarkdownService markdownService;
@inject NavigationManager navigationManager;
@inject PersistentComponentState ApplicationState
@inject IApiClient ApiClient;
@attribute [StreamRendering]
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<PageTitle>@PostTitle</PageTitle>

<MudStack>
    <MudText Typo="Typo.h4">@PostTitle</MudText>
    <MudText Typo="Typo.body1">Publish Date: @PublishDate</MudText>
    <MudText Class="markdown-body mt-5 inter-text-field" Typo="Typo.body1">@((MarkupString)PostBody)</MudText>
</MudStack>

<!-- Save button -->
<AuthorizeView Roles="Admin">
    <Authorized>
        <MudItem xs="12" Class="floating-button">
            <MudFab Color="Color.Primary" OnClick="EditPost" StartIcon="@Icons.Material.Filled.Edit" />
        </MudItem>
    </Authorized>
</AuthorizeView>

@code
{
    [Parameter]
    public string PostId { get; set; }

    public string PostTitle { get; set; }

    public string PostBody { get; set; }

    public string PublishDate { get; set; }

    private PostDTO ThePost { get; set; }

    private PersistingComponentStateSubscription _subscription;

    protected override async Task OnInitializedAsync()
    {
        _subscription = ApplicationState.RegisterOnPersisting(Persist);
        var isFoundDto = ApplicationState.TryTakeFromJson<PostDTO>(nameof(ThePost), out var postDTO);
        if (isFoundDto)
        {
            SetValue(postDTO);
        }
        else
        {
            await GetPostById(PostId);
        }
    }

    private Task Persist()
    {
        ApplicationState.PersistAsJson(nameof(ThePost), ThePost);
        return Task.CompletedTask;
    }

    public async Task GetPostById(string postId)
    {
        try
        {
            ThePost = await ApiClient.GetPostByIdAsync(postId);
            if (ThePost != null)
            {
                SetValue(ThePost);
            }
        }
        // Better do good next time
        catch(Exception ex)
        {
            navigationManager.NavigateTo("/resourceNotFound");
        }
    }

    private void SetValue(PostDTO postDTO)
    {
        PostTitle = postDTO.Title;
        PostBody = string.IsNullOrEmpty(postDTO.Body) ? string.Empty : markdownService.TextToHtml(postDTO.Body);
        PublishDate = postDTO.PublishDate.ToString(Common.DefaultDateTimeFormat);
        PostId = postDTO.Id;
    }

    public void EditPost()
    {
        navigationManager.NavigateTo($"/postEditor/{PostId}");
    }
} 