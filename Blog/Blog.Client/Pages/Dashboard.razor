@page "/dashboard"
@using Blog.DTO
@using System.Collections.ObjectModel
@using Blog.Services
@using System.Runtime.InteropServices
@inject NavigationManager navigationManager;
@inject IApiClient ApiClient;
@inject IDialogService dialogService;
@inject ISnackbar snackbar;
@attribute [Authorize(Roles = "Admin")]

<MudContainer Class="home-container">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Posts">
            <MudDataGrid T="PostDTO" RowClick="(e) => OnRowClick(e.Item.Id)" Items="@Posts" 
                         Filterable="false" SortMode="@SortMode.None" 
                         Groupable="false" Dense="true" Hover="true">
                <Columns>
                    <PropertyColumn Property="p => p.Title" Title="Title" />
                    <PropertyColumn Property="p => p.Description" Title="Description" />
                    <PropertyColumn Property="p => p.CategoryName" Title="Category" />
                    <PropertyColumn Property="p => p.PublishDate" Title="Publish Date" />
                    <PropertyColumn Property="p => p.ModifiedDate" Title="Modified Date" />
                    <TemplateColumn Title="Status">
                        <CellTemplate>
                            <MudStack Row>
                                @if (context.Item.IsDelete.HasValue && context.Item.IsDelete.Value == true)
                                {
                                    <MudText>Deleted</MudText>
                                }
                                else
                                {
                                    <MudText>Published</MudText>
                                }
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row>
                                <MudCheckBox IndeterminateIcon="@Icons.Material.Outlined.CheckBoxOutlineBlank" Value="context.Item.IsDelete"></MudCheckBox>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>

            <MudButton Style="margin-top: 10px" Color="Color.Error" Variant="Variant.Filled" OnClick="WipeAllIsDeletedPosts">Delete Posts</MudButton>


        </MudTabPanel>
        <MudTabPanel Text="Categories">
            <MudDataGrid Items="Categories" Filterable="false" SortMode="@SortMode.None" Groupable="false">
                <Columns>
                    <PropertyColumn Property="c => c.CategoryId" />
                    <PropertyColumn Property="c => c.Name" Title="Name" />
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Users" Disabled="true">
            <MudText>Content Disabled</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Settings" Disabled="true">
            <MudText>Content Disabled</MudText>
        </MudTabPanel>
    </MudTabs>
</MudContainer>


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // TODO: Fix pre-render 
        await InitialDashboard();
    }

    void OnRowClick(string id)
    {
        ViewPost(id);
    }

    private ObservableCollection<PostDTO> posts = new ObservableCollection<PostDTO>();
    public ObservableCollection<PostDTO> Posts { get; set; }

    public List<CategoryDTO> Categories = new List<CategoryDTO>();

    public async Task WipeAllIsDeletedPosts()
    {
        var result = await dialogService.ShowMessageBox("Warning", "Do you want to wipe all 'IsDeleted' posts?");
        if (result.HasValue && result.Value)
        {
            var num = await ApiClient.WipeAllSoftDeletedPostAsync();
            if (num > 0)
            {
                var p = Posts.Where(s => s.IsDelete == null || s.IsDelete == false);
                Posts = new ObservableCollection<PostDTO>(p);

                // TODO: Somehow throw exception about threading. Pls investigate this.
                //foreach(var p in Posts.Where(s => s.IsDelete == true))
                //{
                //    Posts.Remove(p);
                //}

                snackbar.Add($"Deleted {num} posts", Severity.Success, config =>
                {
                    config.CloseAfterNavigation = true;
                    config.ShowTransitionDuration = 250;
                    config.HideTransitionDuration = 250;
                    config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
                });
            }
        }
    }

    public async Task InitialDashboard()
    {
        var posts = await ApiClient.GetPostsAsync();
        if (posts.Any())
        {
            Posts = new ObservableCollection<PostDTO>(posts);
        }

        var cate = await ApiClient.GetCategoryAsync();
        if (cate.Any())
        {
            Categories = cate.ToList();
        }
    }

    public async Task SoftDeletePost(string id)
    {
        if (await ApiClient.SoftDeletePostAsync(id))
        {
            var p = Posts.Single(s => s.Id == id);
            p.IsDelete = true;
        }
        else
        {
            await dialogService.ShowMessageBox("Warning", $"Unable to delete post with id = {id}");
        }
    }

    public async Task RestorePost(string id)
    {
        if (await ApiClient.RestoreDeletedPostAsync(id))
        {
            var p = Posts.Single(s => s.Id == id);
            p.IsDelete = false;
        }
        else
        {
            await dialogService.ShowMessageBox("Warning", $"Unable to restore deleted post with id = {id}");
        }
    }

    public void ViewPost(string postId)
    {
        navigationManager.NavigateTo($"/viewpost/{postId}");
    }
}
