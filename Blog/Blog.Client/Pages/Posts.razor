@page "/posts"
@using Blog.ViewModels;
@attribute [StreamRendering(true)]

<PageTitle>Posts</PageTitle>

@if(!vm.Posts.Any())
{
    <MudText>Loading...</MudText>    
}
else
{
    <div class="home-container">
        @foreach (var category in vm.Categoroies)
        {
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" class="mb-4">
                <h6>@category.Name</h6>
                <ul>
                    @foreach (var post in category.PostDTOs)
                    {
                        <li>
                            <MudLink OnClick="() => vm.ViewPost(post.Id)">@post.Title</MudLink>
                        </li>
                    }
                </ul>
            </MudItem>
        }

        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" class="mb-4">
            <h6>Unclassified Posts</h6>
            @foreach (var post in vm.Posts)
            {
                <div>
                    <MudLink OnClick="() => vm.ViewPost(post.Id)">@post.Title</MudLink>
                </div>
            }
        </MudItem>
    </div>
}

<!-- Create post button -->
<AuthorizeView Roles="Admin">
    <Authorized>
        <MudItem xs="12" Class="floating-button">
            <MudFab Color="Color.Primary" Link="/postEditor" StartIcon="@Icons.Material.Filled.Create" />
        </MudItem>
    </Authorized>
</AuthorizeView>

@code
{
    [Inject]
    private HomeViewModel vm { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            var username = state?.User?.Identity?.Name ?? string.Empty;
        }

        await vm.GetCategoriesWithPost();
        await vm.GetUnclassifiedPosts();
    }
}
