@page "/posts"
@using Blog.DTO
@using Blog.Services
@inject IApiClient ApiClient;
@inject PersistentComponentState ApplicationState
@inject NavigationManager navigationManager;
@attribute [StreamRendering]
<h3>Posts</h3>

<PageTitle>Posts</PageTitle>

@if(UnClassifiedPosts.Any())
{
    <div class="home-container">
        @foreach (var category in Categoroies)
        {
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" class="mb-4">
                <h6>@category.Name</h6>
                <ul>
                    @foreach (var post in category.PostDTOs)
                    {
                        <li>
                            <MudLink OnClick="() => ViewPost(post.Id)">@post.Title</MudLink>
                        </li>
                    }
                </ul>
            </MudItem>
        }

        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" class="mb-4">
            <h6>Unclassified Posts</h6>
            @foreach (var post in UnClassifiedPosts)
            {
                <div>
                    <MudLink OnClick="() => ViewPost(post.Id)">@post.Title</MudLink>
                </div>
            }
        </MudItem>
    </div>
}
else
{
    <MudText>Loading...</MudText>
}

<!-- Create post button -->
<AuthorizeView Roles="Admin">
    <Authorized>
        <MudItem xs="12" Class="floating-button">
            <MudFab Color="Color.Primary" OnClick="@CreatePost" StartIcon="@Icons.Material.Filled.Create" />
        </MudItem>
    </Authorized>
</AuthorizeView>

@code
{
    private PersistingComponentStateSubscription _subscription;

    public List<PostDTO> UnClassifiedPosts = new List<PostDTO>();

    public List<CategoryDTO> Categoroies = new List<CategoryDTO>();

    protected override async Task OnInitializedAsync()
    {
        _subscription = ApplicationState.RegisterOnPersisting(Persist);
        var isFoundPosts = ApplicationState.TryTakeFromJson<List<PostDTO>>(nameof(UnClassifiedPosts), out var blogPosts);
        var isFoundCate = ApplicationState.TryTakeFromJson<List<CategoryDTO>>(nameof(Categoroies), out var categories);
        if(isFoundPosts && isFoundCate)
        {
            UnClassifiedPosts = blogPosts;
            Categoroies = categories;
        }
        else
        {
            await GetCategoriesWithPost();
            await GetUnclassifiedPosts();
        }
    }

    private Task Persist()
    {
        ApplicationState.PersistAsJson(nameof(UnClassifiedPosts), UnClassifiedPosts);
        ApplicationState.PersistAsJson(nameof(Categoroies), Categoroies);
        return Task.CompletedTask;
    }

    public async Task GetUnclassifiedPosts()
    {
        var result = await ApiClient.GetUnclassifiedPostsAsync();
        if (result.Any())
        {
            UnClassifiedPosts = result.ToList();
        }
    }

    private async Task ExecuteDeletePostCommand(PostDTO postDTO)
    {
        //var result = await postService.DeletePost(postDTO.Id);
        //if (result)
        //{
        //    Posts.Remove(postDTO);
        //}
    }

    public async Task GetCategoriesWithPost()
    {
        var result = await ApiClient.GetCategoriesWithLightPostAsync();
        if (result?.Any() == true)
        {
            Categoroies = result.ToList();
        }
    }

    public void EditPost(string postId)
    {
        navigationManager.NavigateTo($"/postEditor/{postId}");
    }

    public void CreatePost()
    {
        navigationManager.NavigateTo("/postEditor");
    }

    public void ViewPost(string postId)
    {
        navigationManager.NavigateTo($"/viewpost/{postId}");
    }
}
