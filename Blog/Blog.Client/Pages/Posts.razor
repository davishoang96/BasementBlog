@page "/posts"
@using Blog.DTO
@using Blog.Services
@using Blog.ViewModels;
@inject IApiClient ApiClient;
@implements IDisposable;
@inject PersistentComponentState ApplicationState;
@inject NavigationManager navigationManager;
@attribute [StreamRendering];

<h3>Posts</h3>

<PageTitle>Posts</PageTitle>

@if(BlogPosts.Any())
{
    <div class="home-container">
        @foreach (var category in Categoroies)
        {
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" class="mb-4">
                <h6>@category.Name</h6>
                <ul>
                    @foreach (var post in category.PostDTOs)
                    {
                        <li>
                            <MudLink OnClick="() => ViewPost(post.Id)">@post.Title</MudLink>
                        </li>
                    }
                </ul>
            </MudItem>
        }

        <MudItem xs="12" sm="12" md="12" lg="12" xl="12" class="mb-4">
            <h6>Unclassified Posts</h6>
            @foreach (var post in BlogPosts)
            {
                <div>
                    <MudLink OnClick="() => ViewPost(post.Id)">@post.Title</MudLink>
                </div>
            }
        </MudItem>
    </div>
}
else
{
    <MudText>Loading...</MudText>
}

<!-- Create post button -->
<AuthorizeView Roles="@role">
    <Authorized>
        <MudItem xs="12" Class="floating-button">
            <MudFab Color="Color.Primary" Href="/postEditor" StartIcon="@Icons.Material.Filled.Create" />
        </MudItem>
    </Authorized>
</AuthorizeView>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private PersistingComponentStateSubscription persistingSubscription;

    public List<PostDTO> BlogPosts = new List<PostDTO>();

    public List<CategoryDTO> Categoroies = new List<CategoryDTO>();

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<List<PostDTO>>(nameof(BlogPosts), out var restoredPosts))
        {
            await GetUnclassifiedPosts();
        }
        else
        {
            BlogPosts = restoredPosts;
        }

        if (!ApplicationState.TryTakeFromJson<List<CategoryDTO>>(nameof(Categoroies), out var restoredCat))
        {
            await GetCategoriesWithPost();
        }
        else
        {
            Categoroies = restoredCat;
        }

        if (!ApplicationState.TryTakeFromJson<string>(nameof(role), out var restoredRole))
        {
            await Test();
        }
        else
        {
            role = "Admin";
        }
    }

    private string role { get; set; }

    private async Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(BlogPosts), BlogPosts);
        ApplicationState.PersistAsJson(nameof(Categoroies), Categoroies);
        ApplicationState.PersistAsJson(nameof(role), role);
    }

    private async Task Test()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            var username = state?.User?.Identity?.Name ?? string.Empty;
            role = state?.User.Claims.FirstOrDefault().Value;
        }
    }

    public async Task GetUnclassifiedPosts()
    {
        var result = await ApiClient.GetUnclassifiedPostsAsync();
        if (result.Any())
        {
            BlogPosts = result.ToList();
        }
    }

    private async Task ExecuteDeletePostCommand(PostDTO postDTO)
    {
        //var result = await postService.DeletePost(postDTO.Id);
        //if (result)
        //{
        //    Posts.Remove(postDTO);
        //}
    }

    public async Task GetCategoriesWithPost()
    {
        var result = await ApiClient.GetCategoriesWithLightPostAsync();
        if (result?.Any() == true)
        {
            Categoroies = result.ToList();
        }
    }

    public void EditPost(string postId)
    {
        navigationManager.NavigateTo($"/postEditor/{postId}");
    }

    public void ViewPost(string postId)
    {
        navigationManager.NavigateTo($"/viewpost/{postId}");
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}
