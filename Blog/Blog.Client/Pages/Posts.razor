@page "/posts"
@using Blog.Client.Services;
@using Blog.DTO
@inject IPostServices postServices;

<h3>Posts</h3>

<MudTable Items="posts" Hover="true" Striped="true">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Category Id</MudTh>
        <MudTh>Category Name</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Body</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Publish Date</MudTh>
        <MudTh>Modified Date</MudTh>
        <MudTh>Is Deleted</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Category Id">@context.CategoryId</MudTd>
        <MudTd DataLabel="Category Name">@context.CategoryName</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Body">@context.Body</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Publish Date">@context.PublishDate.ToString("yyyy-MM-dd")</MudTd>
        <MudTd DataLabel="Modified Date">@context.ModifiedDate.ToString("yyyy-MM-dd")</MudTd>
        <MudTd DataLabel="Is Deleted">@(@context.IsDelete.HasValue && @context.IsDelete.Value ? "Yes" : "No")</MudTd>
    </RowTemplate>
</MudTable>


@code {
    private IEnumerable<PostDTO> posts = new List<PostDTO>();

    protected override async Task OnInitializedAsync()
    {
        posts = await postServices.GetPostsAsync();
    }
}
